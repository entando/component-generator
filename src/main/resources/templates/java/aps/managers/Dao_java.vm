#set( $builder = $bean.edoBuilder)
#set( $beanVar = $constants.getUnCapitalize($bean.name))
#set( $beanClass = $bean.name)
#set( $pk_type = $bean.primaryKeyField.type.javaType)
#set( $pk_type_gen = $bean.primaryKeyField.type.javaTypeGeneric)
#set( $pk_var = $bean.primaryKeyField.name)
#set( $queryName = $constants.toUpperCase($beanClass))
#set( $tableName = $bean.tableName)
#parse("templates/common/license/java_license.vm")
package ${builder.packageName}.${constants.servicesPackage}.$constants.getLowerCase($bean.name);

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
$bean.getImports(true)
##foreach ($f in $bean.fields)	
##end
import org.apache.commons.lang.StringUtils;
#if($bean.entandoSearcherAvailable)
import com.agiletec.aps.system.common.AbstractSearcherDAO;
import com.agiletec.aps.system.common.FieldSearchFilter;
#else
import com.agiletec.aps.system.common.AbstractDAO;
#end
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ${beanClass}DAO extends#if($bean.entandoSearcherAvailable) AbstractSearcherDAO#else AbstractDAO#end implements I${beanClass}DAO {

	private static final Logger logger =  LoggerFactory.getLogger(${beanClass}DAO.class);

    @Override
    public int count${beanClass}s(FieldSearchFilter[] filters) {
        Integer ${beanVar}s = null;
        try {
            ${beanVar}s = super.countId(filters);
        } catch (Throwable t) {
            logger.error("error in count ${beanVar}s", t);
            throw new RuntimeException("error in count ${beanVar}s", t);
        }
        return ${beanVar}s;
    }

#if($bean.entandoSearcherAvailable)
	@Override
	protected String getTableFieldName(String metadataFieldKey) {
		return metadataFieldKey;
	}
	
	@Override
	protected String getMasterTableName() {
		return "$tableName";
	}
	
	@Override
	protected String getMasterTableIdFieldName() {
		return "$pk_var";
	}

    @Override
    public List<$pk_type_gen> search${beanClass}s(FieldSearchFilter[] filters) {
    #if($f.type.javaType == "String")
        return super.searchId(filters);
    #else
        List<Integer> ${beanVar}sId = new ArrayList<>();
        List<String> masterList = super.searchId(filters);
        masterList.stream().forEach(idString -> ${beanVar}sId.add(Integer.parseInt(idString)));
        return ${beanVar}sId;
    #end
    }

#end

	@Override
	public List<$pk_type_gen> load${beanClass}s() {
		List<$pk_type_gen> ${beanVar}sId = new ArrayList<$pk_type_gen>();
		Connection conn = null;
		PreparedStatement stat = null;
		ResultSet res = null;
		try {
			conn = this.getConnection();
			stat = conn.prepareStatement(LOAD_${queryName}S_ID);
			res = stat.executeQuery();
			while (res.next()) {
				$pk_type $pk_var = res.get${constants.getCapitalize($pk_type)}("$constants.getLowerCase($pk_var)");
				${beanVar}sId.add($pk_var);
			}
		} catch (Throwable t) {
			logger.error("Error loading ${beanClass} list",  t);
			throw new RuntimeException("Error loading ${beanClass} list", t);
		} finally {
			closeDaoResources(res, stat, conn);
		}
		return ${beanVar}sId;
	}
	
	@Override
	public void insert${beanClass}(${beanClass} ${beanVar}) {
		PreparedStatement stat = null;
		Connection conn  = null;
		try {
			conn = this.getConnection();
			conn.setAutoCommit(false);
			this.insert${beanClass}(${beanVar}, conn);
 			conn.commit();
		} catch (Throwable t) {
			this.executeRollback(conn);
			logger.error("Error on insert ${beanVar}",  t);
			throw new RuntimeException("Error on insert ${beanVar}", t);
		} finally {
			this.closeDaoResources(null, stat, conn);
		}
	}

	public void insert${beanClass}(${beanClass} ${beanVar}, Connection conn) {
		PreparedStatement stat = null;
		try {
			stat = conn.prepareStatement(ADD_${queryName});
			int index = 1;
#foreach($f in $bean.fields)
#parse("templates/java/aps/managers/inc/dao_stat_by_object.vm")
#end
			stat.executeUpdate();
		} catch (Throwable t) {
			logger.error("Error on insert ${beanVar}",  t);
			throw new RuntimeException("Error on insert ${beanVar}", t);
		} finally {
			this.closeDaoResources(null, stat, null);
		}
	}

	@Override
	public void update${beanClass}(${beanClass} ${beanVar}) {
		PreparedStatement stat = null;
		Connection conn = null;
		try {
			conn = this.getConnection();
			conn.setAutoCommit(false);
			this.update${beanClass}(${beanVar}, conn);
 			conn.commit();
		} catch (Throwable t) {
			this.executeRollback(conn);
			logger.error("Error updating ${beanVar} {}", ${beanVar}.get${constants.getCapitalize($pk_var)}(),  t);
			throw new RuntimeException("Error updating ${beanVar}", t);
		} finally {
			this.closeDaoResources(null, stat, conn);
		}
	}

	public void update${beanClass}(${beanClass} ${beanVar}, Connection conn) {
		PreparedStatement stat = null;
		try {
			stat = conn.prepareStatement(UPDATE_${queryName});
			int index = 1;

#foreach($f in $bean.fields)
#if (!$foreach.first)
#parse("templates/java/aps/managers/inc/dao_stat_by_object.vm")
#end##if ! 1st
#end## foreach
#set ($f = $bean.primaryKeyField)
#parse("templates/java/aps/managers/inc/dao_stat_by_object.vm")
			stat.executeUpdate();
		} catch (Throwable t) {
			logger.error("Error updating ${beanVar} {}", ${beanVar}.get${constants.getCapitalize($pk_var)}(),  t);
			throw new RuntimeException("Error updating ${beanVar}", t);
		} finally {
			this.closeDaoResources(null, stat, null);
		}
	}

	@Override
	public void remove${beanClass}($pk_type $pk_var) {
		PreparedStatement stat = null;
		Connection conn = null;
		try {
			conn = this.getConnection();
			conn.setAutoCommit(false);
			this.remove${beanClass}($pk_var, conn);
 			conn.commit();
		} catch (Throwable t) {
			this.executeRollback(conn);
			logger.error("Error deleting ${beanVar} {}", $pk_var, t);
			throw new RuntimeException("Error deleting ${beanVar}", t);
		} finally {
			this.closeDaoResources(null, stat, conn);
		}
	}
	
	public void remove${beanClass}($pk_type $pk_var, Connection conn) {
		PreparedStatement stat = null;
		try {
			stat = conn.prepareStatement(DELETE_${queryName});
			int index = 1;
#parse("templates/java/aps/managers/inc/dao_stat_by_param.vm")		
			stat.executeUpdate();
		} catch (Throwable t) {
			logger.error("Error deleting ${beanVar} {}", $pk_var, t);
			throw new RuntimeException("Error deleting ${beanVar}", t);
		} finally {
			this.closeDaoResources(null, stat, null);
		}
	}

	public ${beanClass} load${beanClass}($pk_type $pk_var) {
		${beanClass} ${beanVar} = null;
		Connection conn = null;
		PreparedStatement stat = null;
		ResultSet res = null;
		try {
			conn = this.getConnection();
			${beanVar} = this.load${beanClass}($pk_var, conn);
		} catch (Throwable t) {
			logger.error("Error loading ${beanVar} with $pk_var {}", $pk_var, t);
			throw new RuntimeException("Error loading ${beanVar} with $pk_var " + $pk_var, t);
		} finally {
			closeDaoResources(res, stat, conn);
		}
		return ${beanVar};
	}

	public ${beanClass} load${beanClass}($pk_type $pk_var, Connection conn) {
		${beanClass} ${beanVar} = null;
		PreparedStatement stat = null;
		ResultSet res = null;
		try {
			stat = conn.prepareStatement(LOAD_${queryName});
			int index = 1;
#parse("templates/java/aps/managers/inc/dao_stat_by_param.vm")	
			res = stat.executeQuery();
			if (res.next()) {
				${beanVar} = this.build${beanClass}FromRes(res);
			}
		} catch (Throwable t) {
			logger.error("Error loading ${beanVar} with $pk_var {}", $pk_var, t);
			throw new RuntimeException("Error loading ${beanVar} with $pk_var " + $pk_var, t);
		} finally {
			closeDaoResources(res, stat, null);
		}
		return ${beanVar};
	}

	protected ${beanClass} build${beanClass}FromRes(ResultSet res) {
		${beanClass} ${beanVar} = null;
		try {
			${beanVar} = new ${beanClass}();				
#foreach($f in $bean.fields)
#set ($fieldType = ${constants.getCapitalize($f.type.javaType)})
#set ($fieldName = ${constants.getCapitalize($f.name)})
#if($f.type.javaType == "Date")
			Timestamp ${f.name}Value = res.getTimestamp("$constants.getLowerCase($f.name)");
			if (null != ${f.name}Value) {
				${beanVar}.set${fieldName}(new Date(${f.name}Value.getTime()));
			}
#else
			${beanVar}.set${fieldName}(res.get${fieldType}("$constants.getLowerCase($f.name)"));
#end#end
		} catch (Throwable t) {
			logger.error("Error in build${beanClass}FromRes", t);
		}
		return ${beanVar};
	}

	private static final String ADD_${queryName} = "INSERT INTO ${tableName} (#foreach($f in $bean.fields)$constants.getLowerCase($f.name)#if(!$foreach.last),#end #end) VALUES (#foreach($f in $bean.fields)?#if(!$foreach.last),#end #end)";

	private static final String UPDATE_${queryName} = "UPDATE ${tableName} SET #foreach($f in $bean.fields)#if($foreach.first)#elseif($foreach.last)$constants.getLowerCase($f.name)=?#else $constants.getLowerCase($f.name)=?, #end#end WHERE $constants.getLowerCase($pk_var) = ?";

	private static final String DELETE_${queryName} = "DELETE FROM ${tableName} WHERE $constants.getLowerCase($pk_var) = ?";
	
	private static final String LOAD_${queryName} = "SELECT #foreach($f in $bean.fields)$constants.getLowerCase($f.name)#if(!$foreach.last),#end #end FROM ${tableName} WHERE $constants.getLowerCase($pk_var) = ?";
	
	private static final String LOAD_${queryName}S_ID  = "SELECT $constants.getLowerCase($pk_var) FROM ${tableName}";
	
}