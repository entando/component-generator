#set( $builder = $bean.edoBuilder)
#set( $beanVar = $constants.getUnCapitalize($bean.name))
#parse("templates/common/license/java_license.vm")
package ${builder.packageName}.${constants.restPackage}.${constants.getLowerCase($bean.name)}.model;

$bean.getImports(false)
import javax.validation.constraints.*;
import org.hibernate.validator.constraints.NotBlank;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.entando.entando.web.common.json.JsonDateDeserializer;
import org.entando.entando.web.common.json.JsonDateSerializer;

public class ${bean.name}Request {

#foreach ($f in $bean.fields)
#if ($f.required)
#if($f.type.javaType == 'String')
#if($f.length)
	@Size(max = ${f.length}, message = "string.size.invalid")
#end
	@NotBlank(message = "$beanVar.${f.name}.notBlank")
#elseif($f.type.javaType == 'int')
    @NotNull(message = "$beanVar.${f.name}.notBlank")	
#end
#end
#if($f.type.javaType == 'int')
	private $f.type.getJavaType() $f.getName();
#else
#if($f.type.javaType == 'Date')
    @JsonSerialize(using = JsonDateSerializer.class)
    @JsonDeserialize(using = JsonDateDeserializer.class)
#end
	private $f.type.getJavaTypeGeneric() $f.getName();
#end

#end

#foreach ($f in $bean.fields)
	public $f.type.getJavaType() get${constants.getCapitalize($f.name)}() {
		return $f.getName();
	}
	public void set${constants.getCapitalize($f.name)}($f.type.getJavaType() $f.getName()) {
		this.$f.getName() = $f.getName();
	}

#end

}
