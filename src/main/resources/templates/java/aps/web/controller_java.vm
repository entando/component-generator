#set( $builder = $bean.edoBuilder)
#set( $beanVar = $constants.getUnCapitalize($bean.name))
#set( $beanClass = $bean.name)
#set( $pk_type = $bean.fields[0].type.javaType)
#set( $pk_type_gen = $bean.fields[0].type.javaTypeGeneric)
#set( $pk_var = $bean.fields[0].name)
#set( $pk_varName = ${constants.getCapitalize($bean.fields[0].name)})
#set( $springPrep = $constants.getLowerCase($builder.springBeanPreposition))
#parse("templates/common/license/java_license.vm")
package ${builder.packageName}.${constants.restPackage}.${constants.getLowerCase($bean.name)};

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import com.agiletec.aps.system.services.role.Permission;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.entando.entando.web.common.annotation.RestAccessControl;
import org.entando.entando.web.common.exceptions.ValidationConflictException;
import org.entando.entando.web.common.exceptions.ValidationGenericException;
import org.entando.entando.web.common.model.PagedMetadata;
import org.entando.entando.web.common.model.RestListRequest;
import org.entando.entando.web.common.model.RestResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import ${builder.packageName}.${constants.servicesPackage}.${constants.getLowerCase($bean.name)}.I${beanClass}Service;
import ${builder.packageName}.${constants.servicesPackage}.${constants.getLowerCase($bean.name)}.model.${beanClass}Dto;
import ${builder.packageName}.${constants.restPackage}.${constants.getLowerCase($bean.name)}.model.${beanClass}Request;
import ${builder.packageName}.${constants.restPackage}.${constants.getLowerCase($bean.name)}.validator.${beanClass}Validator;

@RestController
@RequestMapping(value = "/${springPrep}/${beanVar}s")
public class ${beanClass}Controller {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private I${beanClass}Service ${beanVar}Service;

    @Autowired
    private ${beanClass}Validator ${beanVar}Validator;

    protected I${beanClass}Service get${beanClass}Service() {
        return ${beanVar}Service;
    }

    public void set${beanClass}Service(I${beanClass}Service ${beanVar}Service) {
        this.${beanVar}Service = ${beanVar}Service;
    }

    protected ${beanClass}Validator get${beanClass}Validator() {
        return ${beanVar}Validator;
    }

    public void set${beanClass}Validator(${beanClass}Validator ${beanVar}Validator) {
        this.${beanVar}Validator = ${beanVar}Validator;
    }

    @RestAccessControl(permission = "$builder.permission")
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<RestResponse> get${beanClass}s(RestListRequest requestList) throws JsonProcessingException {
        this.get${beanClass}Validator().validateRestListRequest(requestList, ${beanClass}Dto.class);
        PagedMetadata<${beanClass}Dto> result = this.get${beanClass}Service().get${beanClass}s(requestList);
        this.get${beanClass}Validator().validateRestListResult(requestList, result);
        logger.debug("Main Response -> {}", result);
        return new ResponseEntity<>(new RestResponse(result.getBody(), null, result), HttpStatus.OK);
    }

    @RestAccessControl(permission = "$builder.permission")
    @RequestMapping(value = "/{${beanVar}${pk_varName}}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<RestResponse> get${beanClass}(@PathVariable String ${beanVar}${pk_varName}) {
#if($pk_type_gen == "String")
		${beanClass}Dto ${beanVar} = this.get${beanClass}Service().get${beanClass}(${beanVar}${pk_varName});
#elseif($pk_type_gen == "Integer")
		${beanClass}Dto ${beanVar} = this.get${beanClass}Service().get${beanClass}(Integer.valueOf(${beanVar}${pk_varName}));
#end
        return new ResponseEntity<>(new RestResponse(${beanVar}), HttpStatus.OK);
    }

    @RestAccessControl(permission = "$builder.permission")
    @RequestMapping(value = "/{${beanVar}${pk_varName}}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<RestResponse> update${beanClass}(@PathVariable String ${beanVar}${pk_varName}, @Valid @RequestBody ${beanClass}Request ${beanVar}Request, BindingResult bindingResult) {
        //field validations
        if (bindingResult.hasErrors()) {
            throw new ValidationGenericException(bindingResult);
        }
        this.get${beanClass}Validator().validateBodyName(String.valueOf(${beanVar}${pk_varName}), ${beanVar}Request, bindingResult);
        if (bindingResult.hasErrors()) {
            throw new ValidationGenericException(bindingResult);
        }

        ${beanClass}Dto ${beanVar} = this.get${beanClass}Service().update${beanClass}(${beanVar}Request);
        return new ResponseEntity<>(new RestResponse(${beanVar}), HttpStatus.OK);
    }

    @RestAccessControl(permission = "$builder.permission")
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<RestResponse> add${beanClass}(@Valid @RequestBody ${beanClass}Request ${beanVar}Request, BindingResult bindingResult) {
        //field validations
        if (bindingResult.hasErrors()) {
            throw new ValidationGenericException(bindingResult);
        }
        //business validations
        get${beanClass}Validator().validate(${beanVar}Request, bindingResult);
        if (bindingResult.hasErrors()) {
            throw new ValidationConflictException(bindingResult);
        }
        ${beanClass}Dto dto = this.get${beanClass}Service().add${beanClass}(${beanVar}Request);
        return new ResponseEntity<>(new RestResponse(dto), HttpStatus.OK);
    }

    @RestAccessControl(permission = "$builder.permission")
    @RequestMapping(value = "/{${beanVar}${pk_varName}}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<RestResponse> delete${beanClass}(@PathVariable String ${beanVar}${pk_varName}) {
        logger.info("deleting {}", ${beanVar}${pk_varName});
#if($pk_type_gen == "String")
        this.get${beanClass}Service().remove${beanClass}(${beanVar}${pk_varName});
        Map<String, String> result = new HashMap<>();
        result.put("${pk_varName}", ${beanVar}${pk_varName});
	
#elseif($pk_type_gen == "Integer")
        this.get${beanClass}Service().remove${beanClass}(Integer.valueOf(${beanVar}${pk_varName}));
        Map<String, Integer> result = new HashMap<>();
        result.put("${pk_var}", Integer.valueOf(${beanVar}${pk_varName}));
#end
        return new ResponseEntity<>(new RestResponse(result), HttpStatus.OK);
    }

}

