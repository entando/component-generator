#set( $builder = $bean.edoBuilder)
#set( $beanVar = $constants.getUnCapitalize($bean.name))
#set( $beanClass = $bean.name)
#set( $pk_type = $bean.primaryKeyField.type.javaType)
#set( $pk_type_gen = $bean.primaryKeyField.type.javaTypeGeneric)
#set( $pk = $bean.primaryKeyField)
#set( $pk_var = $bean.primaryKeyField.name)
#set( $queryName = $constants.toUpperCase($beanClass))
#set( $tableName = $bean.tableName)
#set( $springPrep = $constants.getLowerCase($builder.springBeanPreposition))
#parse("templates/common/license/java_license.vm")
package ${builder.packageName}.${constants.apsPackage}.tags;

import javax.servlet.ServletRequest;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.tagext.TagSupport;
import com.agiletec.aps.system.services.page.Widget;
import com.agiletec.aps.util.ApsProperties;
import com.agiletec.aps.system.SystemConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.agiletec.aps.system.RequestContext;
import com.agiletec.aps.util.ApsWebApplicationUtils;
import org.apache.commons.lang3.StringUtils;
import ${builder.packageName}.${constants.servicesPackage}.${constants.getLowerCase($bean.name)}.I${beanClass}Manager;
import ${builder.packageName}.${constants.servicesPackage}.${constants.getLowerCase($bean.name)}.${beanClass};

public class ${beanClass}Tag extends TagSupport {

	private static final Logger _logger =  LoggerFactory.getLogger(${beanClass}Tag.class);
	
	@Override
	public int doStartTag() throws JspException {
		ServletRequest request =  this.pageContext.getRequest();
		I${beanClass}Manager ${beanVar}Manager = (I${beanClass}Manager) ApsWebApplicationUtils.getBean("${springPrep}${beanClass}Manager", this.pageContext);
		RequestContext reqCtx = (RequestContext) request.getAttribute(RequestContext.REQCTX);
		try {
		${beanClass} ${beanVar} = null;
			if (null != this.getKey()) {
				${beanVar} = ${beanVar}Manager.get${beanClass}(this.getKey());
			} else {
				Widget widget = this.extractWidget(reqCtx);
				ApsProperties widgetConfig = widget.getConfig();
				String var$pk.name = widgetConfig.getProperty("$pk.name");
#if($pk.type.javaType == "String")
				${beanVar} = ${beanVar}Manager.get${beanClass}(var$pk.name);
#elseif($pk.type.javaType == "BigDecimal")
				if (StringUtils.isNotBlank(var$pk.name)) {
					${beanVar} = ${beanVar}Manager.get${beanClass}(new BigDecimal(var$pk.name));
				}
#elseif($pk.type.javaType == "int")
				if (StringUtils.isNotBlank(var$pk.name)) {
					${beanVar} = ${beanVar}Manager.get${beanClass}(new Integer(var$pk.name));
				}
#end
			}
			this.pageContext.setAttribute(this.getVar(), ${beanVar});
		} catch (Throwable t) {
			_logger.error("Error in doStartTag", t);
			throw new JspException("Error in ${beanClass}Tag doStartTag", t);
		}
		return super.doStartTag();
	}

	@Override
	public int doEndTag() throws JspException {
		this.release();
		return super.doEndTag();
	}

	@Override
	public void release() {
		this.setVar(null);
		this.setKey(null);
	}

	private Widget extractWidget(RequestContext reqCtx) {
		Widget widget = null;
		widget = (Widget) reqCtx.getExtraParam((SystemConstants.EXTRAPAR_CURRENT_WIDGET));
		return widget;
	}

	protected String extractWidgetParameter(String parameterName, ApsProperties widgetConfig, RequestContext reqCtx) {
		return (String) widgetConfig.get(parameterName);
	}

	public String getVar() {
		return _var;
	}
	public void setVar(String var) {
		this._var = var;
	}

	public $pk_type_gen getKey() {
		return _key;
	}
	public void setKey($pk_type_gen key) {
		this._key = key;
	}

	private String _var;
	private $pk_type_gen _key;
}
